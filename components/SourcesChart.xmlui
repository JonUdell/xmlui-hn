<Component
    name="SourcesChart"
    xmlns:XMLUIExtensions="component-ns"
    var.selectedDomain="www.nytimes.com"
    var.debouncedStartDate="{ window.minDate.toISOString().slice(0, 10) }"
    var.debouncedEndDate="{ window.maxDate.toISOString().slice(0, 10) }"
>

    <DataSource id="daysSources" url="{ window.xmluiHost + '/query' }"
        body="{ window.daysSources(domains.value, debouncedStartDate, debouncedEndDate) }"
        method="POST" />

    <DataSource id="distinctSources" url="{ window.xmluiHost + '/query' }"
        body="{ window.distinctSources(selectedDomain.value) }" method="POST"
    />

    <VStack inspect="true">

        <AutoComplete
            width="30%"
            id="domains"
            initialValue="{selectedDomain}">
            <Items data="{distinctSources}">
                <Option value="{$item.domain}" label="{$item.domain}" />
            </Items>
        </AutoComplete>

        <HStack>

            <VStack width="30%">

                <Table
                    data="{distinctSources}"
                >
                    <Column bindTo="domain" canSort="true">
                        <!--
                    <Link to="/sources" label="{$item.domain}"  />
                   -->
                        <Link label="{$item.domain}" onClick="selectedDomain = $item.domain" />
                    </Column>
                    <Column bindTo="count" canSort="true" />
                </Table>

            </VStack>

            <VStack width="70%">


                <H1>Stories by day for {domains.value} </H1>

                <Slider
                    id="slider"
                    label="dateRange"
                    minValue="{0}"
                    maxValue="{window.totalRange}"
                    initialValue="{ [window.initialStartValue, window.initialEndValue] }"
                    step="1"
                    width="90%"
                    onDidChange="{
            // Simple throttling using timestamp comparison
            const now = Date.now();
            if (now - lastSliderUpdate > throttleDelay) {
                // Update the debounced date values
                debouncedStartDate = window.sliderValueToDate(slider.value[0]).toISOString().slice(0, 10);
                debouncedEndDate = window.sliderValueToDate(slider.value[1]).toISOString().slice(0, 10);
                lastSliderUpdate = now;
                console.log('Updating dates:', debouncedStartDate, debouncedEndDate);
            }

            console.log('Slider changed:', window.sliderValueToDate(slider.value[0]), window.sliderValueToDate(slider.value[1]));
        }"
                    valueFormat="{ (value) => {
            const date = window.sliderValueToDate(value);
            return window.formatDate(date)
            }
        }"
                />

                <Card width="100%" height="800px">
                    <XMLUIExtensions:BarChart
                        layout="vertical"
                        data="{daysSources.value}"
                        dataKeys="{['stories']}" nameKey="day"
                        showLabel="true"
                        tickFormatter="{(value) => {
                        return getDate(value).toLocaleDateString('en-CA', {
                            year: '2-digit',
                            month: '2-digit',
                            day: '2-digit'
                        }).replaceAll('-', '/');
                        }}"
                    />
                </Card>
            </VStack>

        </HStack>

    </VStack>


</Component>